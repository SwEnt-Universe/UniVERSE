name: CI - Test Runner

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          fi

      - name: Validate TOMTOM_API_KEY
        run: |
          if [ -z "$TOMTOM_API_KEY" ]; then
            echo "::error::TOMTOM_API_KEY secret is not set"
            exit 1
          fi

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Firestore Security Rules tests
        run: |
          if [ -e "firebase/firestore/firestore.rules" ]; then
            (cd firebase/firestore/test 2>/dev/null && npm install && npm test)
          else
            echo "Skipping Firestore rules test..."
          fi

      - name: Assemble Debug build only
        run: ./gradlew assembleDebug lintDebug --parallel --build-cache

      - name: Run unit + lint checks
        run: ./gradlew check --parallel --build-cache

      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            nohup firebase emulators:start --only auth,firestore --project demo-project > firebase-emulator.log 2>&1 &
            sleep 20
          fi

      - name: Run instrumentation tests (filtered or full)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x2400
          disable-animations: true
          script: |
            EVENT_NAME="${{ github.event_name }}"
            REF="${{ github.ref }}"
            TITLE="${{ github.event.pull_request.title }}"
            echo "Event: $EVENT_NAME"
            echo "Ref: $REF"
            echo "PR title: $TITLE"
            
            if [[ "$EVENT_NAME" == "push" && "$REF" == "refs/heads/main" ]]; then
              echo "‚û°Ô∏è Main branch push ‚Üí running full connectedCheck"
              ./gradlew connectedCheck --parallel --build-cache
            elif [[ "$TITLE" == *"[Profile]"* ]]; then
              echo "üß© [Profile] detected in PR title ‚Üí running profile suite only"
              ./gradlew ProfileRelatedConnectedCheck --build-cache
            else
              echo "üß™ No special keyword ‚Üí running full connectedCheck"
              ./gradlew connectedCheck --parallel --build-cache
            fi

      # This step generates the coverage report which will be uploaded to sonar
      - name: Generate Coverage Report
        run: |
          ./gradlew jacocoTestReport

      # Upload the various reports to sonar
      - name: Upload report to SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache
