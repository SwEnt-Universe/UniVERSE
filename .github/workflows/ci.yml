name: CI - Test Runner

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1️⃣  BUILD + LINT + UNIT TESTS
  # ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    outputs:
      skip: ${{ steps.skip-heavy.outputs.skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret not set."
          fi

      - name: Validate TOMTOM_API_KEY
        run: |
          if [ -z "$TOMTOM_API_KEY" ]; then
            echo "::error::TOMTOM_API_KEY secret is not set"
            exit 1
          fi

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Detect [Docs]-only changes
        id: skip-heavy
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $TITLE"
          if [[ "$TITLE" == *"[Docs]"* || "$TITLE" == *"[docs]"* ]]; then
            echo "📝 [Docs] detected → skipping heavy jobs"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Assemble + Unit Tests
        if: steps.skip-heavy.outputs.skip != 'true'
        run: ./gradlew assembleDebug testDebugUnitTest --build-cache


  # ─────────────────────────────────────────────────────────────
  # 2️⃣  CONNECTED TEST SUITE A
  # ─────────────────────────────────────────────────────────────
  connected-tests-A:
    needs: build
    if: needs.build.outputs.skip != 'true'
    runs-on: ubuntu-latest
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - uses: gradle/actions/setup-gradle@v3

      # Start Firebase emulator suite (auth + firestore)
      - name: Start Firebase emulators
        run: |
          echo "🚀 Starting Firebase emulators (Suite A)..."
          nohup firebase emulators:start --only auth,firestore --project demo-project > firebase-emulator.log 2>&1 &
          sleep 20
          echo "✅ Firebase emulators ready."

      # Run Android instrumentation tests
      - name: Run Connected Tests (Suite A)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: ./gradlew connectedSuiteAConnectedCheck --build-cache

      # Upload emulator logs for debugging
      - name: Upload Firebase Emulator Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-emulator-logs-suiteA
          path: firebase-emulator.log


  # ─────────────────────────────────────────────────────────────
  # 3️⃣  CONNECTED TEST SUITE B
  # ─────────────────────────────────────────────────────────────
  connected-tests-B:
    needs: build
    if: needs.build.outputs.skip != 'true'
    runs-on: ubuntu-latest
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - uses: gradle/actions/setup-gradle@v3

      # Start Firebase emulator suite (auth + firestore)
      - name: Start Firebase emulators
        run: |
          echo "🚀 Starting Firebase emulators (Suite B)..."
          nohup firebase emulators:start --only auth,firestore --project demo-project > firebase-emulator.log 2>&1 &
          sleep 20
          echo "✅ Firebase emulators ready."

      # Run Android instrumentation tests
      - name: Run Connected Tests (Suite B)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: ./gradlew connectedSuiteBConnectedCheck --build-cache

      # Upload emulator logs for debugging
      - name: Upload Firebase Emulator Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-emulator-logs-suiteB
          path: firebase-emulator.log


  # ─────────────────────────────────────────────────────────────
  # 4️⃣  REPORT AGGREGATION (JaCoCo + Sonar)
  # ─────────────────────────────────────────────────────────────
  report:
    needs: [connected-tests-A, connected-tests-B]
    if: needs.build.outputs.skip != 'true'
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v3

      - name: Generate Combined JaCoCo Report
        run: ./gradlew jacocoTestReport --build-cache

      - name: Upload to SonarCloud
        run: ./gradlew sonar --parallel --build-cache
