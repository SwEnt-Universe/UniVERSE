name: CI - Test Runner

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  # -------------------------
  # üß± Common setup (reusable via `uses`)
  # -------------------------
  setup:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      gradle-cache-key: ${{ steps.gradle-cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM for Android Emulator
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install jq and Firebase CLI
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          npm install -g firebase-tools

      - name: Gradle cache setup
        uses: gradle/actions/setup-gradle@v3

      - name: Compute Gradle cache key
        id: gradle-cache-key
        run: echo "key=${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}" >> $GITHUB_OUTPUT

      - name: Cache Gradle build cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/build-cache-*
          key: ${{ steps.gradle-cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  # -------------------------
  # üß™ Static checks & unit tests
  # -------------------------
  build_and_unit_tests:
    name: Build + Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/build-cache-*
          key: ${{ needs.setup.outputs.gradle-cache-key }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret not set"
          fi

      - name: Validate TOMTOM_API_KEY
        run: |
          if [ -z "$TOMTOM_API_KEY" ]; then
            echo "::error::TOMTOM_API_KEY secret is not set"
            exit 1
          fi

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Firestore Security Rules tests
        run: |
          if [ ! -e "firebase.json" ]; then
            echo "(Warning): firebase.json missing, skipping Firestore rule tests"
            exit 0
          fi
          jq -e '.emulators' firebase.json >/dev/null || { echo "Missing emulators config"; exit 1; }
          for e in auth firestore; do
            jq -e ".emulators.$e" firebase.json >/dev/null || { echo "Missing emulator $e"; exit 1; }
          done
          if [ -e "firebase/firestore/firestore.rules" ]; then
            jq -e '.firestore.rules' firebase.json >/dev/null || { echo "Missing firestore.rules"; exit 1; }
            (cd firebase/firestore/test && npm install && npm test) || exit $?
          else
            echo "(Info): Firestore rules not found, skipping"
          fi

      - name: Assemble Debug build
        run: ./gradlew assembleDebug lintDebug --parallel --build-cache

      - name: Run Unit tests
        run: ./gradlew check --parallel --build-cache

      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport

  # -------------------------
  # üì± Instrumentation tests (runs in parallel)
  # -------------------------
  instrumentation_tests:
    name: Instrumentation Tests (AVD)
    runs-on: ubuntu-latest
    needs: setup
    env:
      TOMTOM_API_KEY: ${{ secrets.TOMTOM_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/build-cache-*
          key: ${{ needs.setup.outputs.gradle-cache-key }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34-v1

      - name: Create AVD if needed
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            nohup firebase emulators:start --only auth,firestore --project demo-project > firebase-emulator.log 2>&1 &
            sleep 20
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping"
          fi

      - name: Run connected instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 720x1280
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

  # -------------------------
  # ‚òÅÔ∏è SonarCloud analysis (depends on both)
  # -------------------------
  sonar:
    name: Upload Reports to SonarCloud
    runs-on: ubuntu-latest
    needs: [ build_and_unit_tests, instrumentation_tests ]
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload to SonarCloud
        run: ./gradlew sonar --parallel --build-cache
